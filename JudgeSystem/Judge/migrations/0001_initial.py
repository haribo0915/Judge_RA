# Generated by Django 2.2.7 on 2019-12-02 17:39

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('description', models.TextField(blank=True, max_length=1000)),
                ('language', models.IntegerField(blank=True, choices=[(0, 'SQL'), (1, 'Relation Algebra')], default=0, help_text='Problem language')),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True, max_length=1000)),
                ('solution', models.TextField(blank=True, max_length=1000, null=True)),
                ('language', models.IntegerField(blank=True, choices=[(0, 'SQL'), (1, 'Relation Algebra')], default=0, help_text='Problem language')),
                ('category', models.CharField(blank=True, choices=[('aggregate', 'Aggregate'), ('division', 'Division'), ('join', 'Join'), ('nested_query', 'Nested_query'), ('basic_operation', 'Basic')], default='basic_operation', help_text='Problem category', max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Problem_table',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('ip', models.CharField(max_length=20, null=True)),
                ('motto', models.TextField(blank=True, max_length=500)),
                ('submit_num', models.IntegerField(null=True)),
                ('solved_num', models.IntegerField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('time', models.FloatField()),
                ('result', models.IntegerField()),
                ('language', models.IntegerField()),
                ('source', models.TextField(blank=True, max_length=500)),
                ('problem_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Judge.Problem')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='problem',
            name='tables',
            field=models.ManyToManyField(help_text='Select tables for the problem', to='Judge.Problem_table'),
        ),
        migrations.CreateModel(
            name='Exam_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Judge.Exam')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Exam_problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Judge.Exam')),
                ('problem_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Judge.Problem')),
            ],
        ),
        migrations.AddField(
            model_name='exam',
            name='problem_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Judge.Problem'),
        ),
    ]
